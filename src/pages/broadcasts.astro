---
import "@/styles/globals.css";
import Layout from "../layouts/Layout.astro";
import BroadcastCard from "@/components/BroadcastCard.astro";
import { actions } from "astro:actions";

let { data: broadcasts, error: _ } = await actions.getBroadcasts();
if (!broadcasts) {
  broadcasts = [{ id: "some-id", title: "Test Broadcast" }];
}

console.log(broadcasts);
---

<Layout title="Rill Streaming">
  <main class="container my-3">
    <section id="broadcasts-plaza">
      <div class="grid grid-cols-4 gap-4 w-full">
        {
          broadcasts.length > 0 &&
            broadcasts.map((broadcast) => (
              <BroadcastCard id={broadcast.id} title={broadcast.title} />
            ))
        }
      </div>
    </section>
  </main>
</Layout>

<style>
  main {
    max-width: calc(100% - 2rem);
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
