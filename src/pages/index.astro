---
import "@/styles/globals.css";
import Layout from "../layouts/Layout.astro";
import VideoPlayer from "@/components/VideoPlayer.astro";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
---

<Layout title="Welcome to Astro.">
  <main class="container relative">
    <section>
      <div>
        <VideoPlayer id="rill-player" />
        <div class="flex w-full max-w-sm items-center space-x-2">
          <Input
            id="broadcast-title"
            type="text"
            placeholder="Broadcast Title"
          />
          <Button id="broadcast-button" type="submit">Broadcast</Button>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  import { actions } from "astro:actions";

  // TODO: Troubleshoot why the ICE connection state fails to connect in Safari
  const broadcastButton = document.getElementById("broadcast-button");
  broadcastButton?.addEventListener("click", async () => {
    let sd: string = "";
    let pc = new RTCPeerConnection({
      iceServers: [
        {
          urls: "stun:stun.l.google.com:19302",
        },
      ],
    });
    pc.oniceconnectionstatechange = (_) => console.log(pc.iceConnectionState);
    pc.onicecandidate = async (event) => {
      if (event.candidate === null) {
        sd = btoa(JSON.stringify(pc.localDescription));
        console.log("sd", sd);

        const title = document.getElementById(
          "broadcast-title",
        ) as HTMLInputElement;
        const { data: sdp, error } = await actions.createBroadcast({
          title: title.value,
          sdp: sd,
        });
        if (error || !sdp) {
          console.error("Error creating broadcast", error);
        }

        if (sdp) {
          console.log("here settings remote description", sdp);
          pc.setRemoteDescription(JSON.parse(atob(sdp)));
        }
      }
    };

    const stream = await navigator.mediaDevices.getUserMedia({
      video: true,
      audio: false,
    });
    stream.getTracks().forEach((track) => pc.addTrack(track, stream));

    const video: HTMLVideoElement = document.getElementById(
      "rill-player",
    ) as HTMLVideoElement;

    if (video === null) {
      throw new Error("Video element not found");
    }

    video.srcObject = stream;

    let offer = await pc.createOffer();
    pc.setLocalDescription(offer);
  });
</script>
