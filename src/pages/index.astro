---
import "@/styles/globals.css";
import Layout from "../layouts/Layout.astro";
import VideoPlayer from "@/components/VideoPlayer.astro";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
---

<Layout title="Welcome to Astro.">
  <main class="container relative">
    <section>
      <div>
        <VideoPlayer id="rill-player" />
        <div class="flex w-full max-w-sm items-center space-x-2">
          <Input
            id="broadcast-title"
            type="text"
            placeholder="Broadcast Title"
          />
          <Button id="broadcast-button" type="submit">Broadcast</Button>
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  // TODO: Troubleshoot why the ICE connection state fails to connect in Safari
  const broadcastButton = document.getElementById("broadcast-button");
  broadcastButton?.addEventListener("click", async () => {
    const ws = new WebSocket(
      `${import.meta.env.PUBLIC_WS_BACKEND_URL}/broadcasts/ws`,
    );

    ws.onopen = () => {
      console.log("Connected to WebSocket");
    };

    ws.onclose = () => {
      console.log("Disconnected from WebSocket");
    };

    let sd: string = "";
    const iceServers: RTCIceServer[] = [
      { urls: "stun:stun.l.google.com:19302" },
      { urls: "stun:stun1.l.google.com:19302" },
      { urls: "stun:stun2.l.google.com:19302" },
      { urls: "stun:stun3.l.google.com:19302" },
      { urls: "stun:stun4.l.google.com:19302" },
    ];
    let pc = new RTCPeerConnection({
      iceServers: iceServers,
    });
    pc.onicecandidateerror = (event) => console.log(event);

    ws.onmessage = (event) => {
      const eventData = event.data as string;
      const eventObject: Record<string, any> = JSON.parse(eventData);

      if (eventObject.event === "new-broadcast") {
        const { sdp } = eventObject.data;
        console.log(sdp);
        pc.setRemoteDescription(JSON.parse(atob(sdp)));
      }
    };

    pc.oniceconnectionstatechange = (_) => console.log(pc.iceConnectionState);
    pc.onicecandidate = async (event) => {
      console.log("icecandidate", event);
      if (event.candidate === null) {
        console.log("candidate: ", event.candidate);

        console.log("post session", pc.localDescription);
        sd = btoa(JSON.stringify(pc.localDescription));
        console.log("session description: ", sd);

        const title = document.getElementById(
          "broadcast-title",
        ) as HTMLInputElement;
        const payload = {
          event: "new-broadcast",
          data: { title: title.value, sdp: sd },
        };

        ws.send(JSON.stringify(payload));
      }
    };

    const stream = await navigator.mediaDevices.getUserMedia({
      video: true,
      audio: false,
    });
    stream.getTracks().forEach((track) => pc.addTrack(track, stream));

    const video: HTMLVideoElement = document.getElementById(
      "rill-player",
    ) as HTMLVideoElement;

    if (video === null) {
      throw new Error("Video element not found");
    }

    video.srcObject = stream;

    let offer = await pc.createOffer();
    pc.setLocalDescription(offer);
  });
</script>
