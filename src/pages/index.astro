---
import "@/styles/globals.css";
import Layout from "../layouts/Layout.astro";
import VideoPlayer from "@/components/VideoPlayer.astro";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
---

<Layout title="Rill">
  <main class="container relative">
    <section>
      <div class="flex flex-col gap-4">
        <div class="flex w-full max-w-sm items-center space-x-2 m-auto">
          <Input
            id="broadcast-title"
            type="text"
            placeholder="Broadcast Title"
            className="w-full"
          />
          <Button id="broadcast-button" type="submit">Broadcast</Button>
        </div>
        <VideoPlayer id="rill-player" />
      </div>
    </section>
  </main>
</Layout>

<script>
  // TODO: Troubleshoot why the ICE connection state fails to connect in Safari
  const broadcastButton = document.getElementById("broadcast-button");
  broadcastButton?.addEventListener("click", async () => {
    const ws = new WebSocket(
      `${import.meta.env.PUBLIC_WS_BACKEND_URL}/broadcasts/ws`,
    );

    ws.onopen = () => {
      console.log("Connected to WebSocket");

      const title = document.getElementById(
        "broadcast-title",
      ) as HTMLInputElement;
      const payload = {
        event: "new-broadcast",
        data: { title: title.value },
      };

      ws.send(JSON.stringify(payload));
    };

    ws.onclose = () => {
      console.log("Disconnected from WebSocket");
    };

    let sd: string = "";
    const iceServers: RTCIceServer[] = [
      {
        urls: [
          "stun:stun.l.google.com:19302",
          "stun:stun1.l.google.com:19302",
          "stun:stun2.l.google.com:19302",
        ],
      },
    ];
    let pc = new RTCPeerConnection({
      iceServers: iceServers,
    });
    pc.onicecandidateerror = (event) => console.log(event);

    ws.onmessage = (event) => {
      const eventData = event.data as string;
      const eventObject: Record<string, any> = JSON.parse(eventData);

      if (eventObject.event === "answer") {
        const { sdp } = eventObject.data;
        console.log("answer: ", JSON.parse(atob(sdp)));

        pc.setRemoteDescription(JSON.parse(atob(sdp)));
      } else if (eventObject.event === "candidate") {
        console.log(eventObject.data);
        pc.addIceCandidate(JSON.parse(eventObject.data));
      }
    };

    pc.oniceconnectionstatechange = (_) => console.log(pc.iceConnectionState);
    pc.onicecandidate = async (event) => {
      if (event.candidate && event.candidate.candidate !== "") {
        const payload = {
          event: "ice-candidate",
          data: { candidate: event.candidate },
        };
        ws.send(JSON.stringify(payload));
      }
    };

    const stream = await navigator.mediaDevices.getUserMedia({
      video: true,
      audio: false,
    });
    stream.getTracks().forEach((track) => pc.addTrack(track, stream));

    const video: HTMLVideoElement = document.getElementById(
      "rill-player",
    ) as HTMLVideoElement;

    if (video === null) {
      throw new Error("Video element not found");
    }

    video.srcObject = stream;

    pc.createOffer({ offerToReceiveVideo: true }).then((offer) => {
      pc.setLocalDescription(offer);

      sd = btoa(JSON.stringify(offer));
      const payload = {
        event: "offer",
        data: { sdp: sd },
      };

      ws.send(JSON.stringify(payload));
    });
  });
</script>
