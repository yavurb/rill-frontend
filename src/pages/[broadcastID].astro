---
import "@/styles/globals.css";
import Layout from "@/layouts/Layout.astro";
import VideoPlayer from "@/components/VideoPlayer.astro";
import { actions } from "astro:actions";

const { broadcastID = "" } = Astro.params;

const { data: broadcast, error } = await actions.getBroadcast(broadcastID);
if (error || !broadcast) {
  // TODO: Redirect to 404
  console.error("Error getting broadcast", error);

  return Astro.redirect("/broadcasts");
}
---

<Layout title={broadcast?.title || "Viewing..."}>
  <main class="container relative">
    <section>
      <div>
        <VideoPlayer id="rill-player" data-broadcast={`${broadcast.id}`} />
      </div>
    </section>
  </main>
</Layout>

<script>
  const video = document.getElementById("rill-player") as HTMLVideoElement;
  if (video === null) {
    throw new Error("Video element not found");
  }

  const broadcastID = video.dataset.broadcast;
  if (!broadcastID) {
    // TODO: Redirect to 404
    throw new Error("Broadcast ID not found");
  }

  function connectWebSocket(url: string): Promise<WebSocket> {
    return new Promise((resolve, reject) => {
      const socket = new WebSocket(url);

      socket.onopen = function () {
        console.log("Connected to WebSocket");
        resolve(socket);
      };

      socket.onclose = () => {
        console.log("Disconnected from WebSocket");
      };

      socket.onerror = function (error) {
        reject(error);
      };
    });
  }

  const URL = `${import.meta.env.PUBLIC_WS_BACKEND_URL}/broadcasts/viewers/ws`;
  const ws = await connectWebSocket(URL);

  const payload = {
    event: "new-viewer",
    data: {
      broadcast_id: broadcastID,
    },
  };
  ws.send(JSON.stringify(payload));

  const iceServers: RTCIceServer[] = [
    { urls: "stun:stun.l.google.com:19302" },
    { urls: "stun:stun1.l.google.com:19302" },
    { urls: "stun:stun2.l.google.com:19302" },
  ];
  let pc = new RTCPeerConnection({
    iceServers: iceServers,
  });

  ws.onmessage = (event) => {
    const eventData = event.data as string;
    const eventObject: Record<string, any> = JSON.parse(eventData);

    if (eventObject.event === "answer") {
      const { sdp } = eventObject.data;
      console.log("answer: ", JSON.parse(atob(sdp)));

      pc.setRemoteDescription(JSON.parse(atob(sdp)));
    } else if (eventObject.event === "candidate") {
      pc.addIceCandidate(JSON.parse(eventObject.data));
    }
  };

  pc.oniceconnectionstatechange = (_) => console.log(pc.iceConnectionState);
  pc.onicecandidate = async (event) => {
    if (event.candidate && event.candidate.candidate !== "") {
      const payload = {
        event: "ice-candidate",
        data: { candidate: event.candidate },
      };
      ws.send(JSON.stringify(payload));
    }
  };

  pc.ontrack = (event) => {
    video.srcObject = event.streams[0];
    video.autoplay = true;
    video.controls = true;
  };

  pc.addTransceiver("video");
  pc.createOffer({ offerToReceiveVideo: true }).then((offer) => {
    pc.setLocalDescription(offer);

    const sd = btoa(JSON.stringify(offer));
    const payload = {
      event: "offer",
      data: { sdp: sd },
    };

    ws.send(JSON.stringify(payload));
  });
</script>
