---
interface Props {
  id: string;
}

const { id } = Astro.props;
---

<div>
  <video id={id} class="aspect-video w-full" autoplay muted> </video>
</div>

<script>
  const joinButton = document.getElementById("join");

  joinButton?.addEventListener("click", async () => {
    console.log("Joining...");
    let pc = new RTCPeerConnection({
      iceServers: [
        {
          urls: "stun:stun.l.google.com:19302",
        },
      ],
    });
    pc.oniceconnectionstatechange = (_) => console.log(pc.iceConnectionState);
    pc.onicecandidate = async (event) => {
      if (event.candidate === null) {
        let sd = btoa(JSON.stringify(pc.localDescription));
        console.log("sd", sd);

        let response = await fetch("http://localhost:8910/viewer", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify({
            sdp: sd,
          }),
        });

        console.log("response", response);

        if (response.ok) {
          console.log("serverSD");
          let serverSD = await response.json();

          console.log("serverSD", serverSD);

          pc.setRemoteDescription(JSON.parse(atob(serverSD.sdp)));
        }
      }
    };

    pc.ontrack = (event) => {
      const video: HTMLVideoElement = document.getElementById(
        "rill-player",
      ) as HTMLVideoElement;

      if (video === null) {
        throw new Error("Video element not found");
      }

      video.srcObject = event.streams[0];
      video.autoplay = true;
      video.controls = true;
    };

    pc.addTransceiver("video");
    let offer = await pc.createOffer();
    pc.setLocalDescription(offer);
  });
</script>
